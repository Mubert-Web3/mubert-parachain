
//! Autogenerated weights for `pallet_arweave`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.1.0
//! DATE: 2025-08-31, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `13th Gen Intel(R) Core(TM) i7-13700HX`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// ./target/release/wbuild/mubert-runtime/mubert_runtime.wasm
// --pallet
// pallet_arweave
// --extrinsic
// 
// --template
// ./pallets/benchmarking/frame-weight-template.hbs
// --output
// ./pallets/pallet-arweave/src/weights.rs
// --allow-missing-host-functions

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use polkadot_sdk::*;

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_arweave`.
pub trait WeightInfo {
	fn create_task() -> Weight;
}

/// Weights for `pallet_arweave` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Arweave::Deposits` (r:1 w:1)
	/// Proof: `Arweave::Deposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Arweave::NextTaskId` (r:1 w:1)
	/// Proof: `Arweave::NextTaskId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Arweave::Tasks` (r:1 w:1)
	/// Proof: `Arweave::Tasks` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3593`
		// Minimum execution time: 90_656_000 picoseconds.
		Weight::from_parts(93_748_000, 3593)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Arweave::Deposits` (r:1 w:1)
	/// Proof: `Arweave::Deposits` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Arweave::NextTaskId` (r:1 w:1)
	/// Proof: `Arweave::NextTaskId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Arweave::Tasks` (r:1 w:1)
	/// Proof: `Arweave::Tasks` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4`
		//  Estimated: `3593`
		// Minimum execution time: 90_656_000 picoseconds.
		Weight::from_parts(93_748_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}
