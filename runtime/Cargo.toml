[package]
name = "mubert-runtime"
description = "A Mubert runtime, supports ip-onchain."
version = "0.1.0"
license = "Unlicense"
authors.workspace = true
homepage.workspace = true
repository.workspace = true
edition.workspace = true
publish = false

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[build-dependencies]
substrate-wasm-builder = { optional = true, workspace = true, default-features = true }
docify = { workspace = true }

[dependencies]
scale-codec = { workspace = true }
scale-info = { workspace = true }

serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true, default-features = false, features = [
    "alloc",
] }

hex-literal = { optional = true, workspace = true, default-features = true }
log = { workspace = true }

smallvec = { workspace = true, default-features = true }
docify = { workspace = true }

polkadot-sdk = { workspace = true, features = [
    "cumulus-pallet-aura-ext",
    "cumulus-pallet-session-benchmarking",
    "cumulus-pallet-xcm",
    "cumulus-pallet-xcmp-queue",
    "cumulus-primitives-aura",
    "cumulus-primitives-core",
    "cumulus-primitives-storage-weight-reclaim",
    "cumulus-primitives-utility",
    "pallet-aura",
    "pallet-authorship",
    "pallet-balances",
    "pallet-collator-selection",
    "pallet-message-queue",
    "pallet-session",
    "pallet-sudo",
    "pallet-timestamp",
    "pallet-transaction-payment",
    "pallet-transaction-payment-rpc-runtime-api",
    "pallet-xcm",
    "pallet-grandpa",
    "pallet-membership",
    "pallet-nfts",
    "pallet-nfts-runtime-api",
    "parachains-common",
    "polkadot-parachain-primitives",
    "polkadot-runtime-common",
    "runtime",
    "staging-parachain-info",
    "staging-xcm",
    "staging-xcm-builder",
    "staging-xcm-executor",
], default-features = false }
cumulus-pallet-parachain-system.workspace = true

pallet-ip-onchain = { workspace = true, default-features = false }
pallet-ip-onchain-runtime-api = { workspace = true, default-features = false }
pallet-arweave = { workspace = true, default-features = false }

# Frontier
fp-account = { workspace = true, features = ["serde"] }
fp-evm = { workspace = true, features = ["serde"] }
fp-rpc = { workspace = true }
fp-self-contained = { workspace = true, features = ["serde"] }
# Frontier FRAME
pallet-base-fee = { workspace = true }
pallet-dynamic-fee = { workspace = true }
pallet-ethereum = { workspace = true }
pallet-evm = { workspace = true }
pallet-evm-chain-id = { workspace = true }
pallet-evm-precompile-modexp = { workspace = true }
pallet-evm-precompile-sha3fips = { workspace = true }
pallet-evm-precompile-simple = { workspace = true }

[features]
default = ["std"]
std = [
    "log/std",
    # Codecs
    "scale-codec/std",
    "scale-info/std",
    "serde_json/std",
    "serde/std",
    # Polkadot
    "cumulus-pallet-parachain-system/std",
    "polkadot-sdk/std",
    "substrate-wasm-builder",
    # Custom pallets
    "pallet-ip-onchain/std",
    "pallet-ip-onchain-runtime-api/std",
    "pallet-arweave/std",
    # Frontier
    "fp-account/std",
    "fp-evm/std",
    "fp-rpc/std",
    "fp-self-contained/std",
    # Frontier FRAME
    "pallet-base-fee/std",
    "pallet-dynamic-fee/std",
    "pallet-ethereum/std",
    "pallet-evm/std",
    "pallet-evm-chain-id/std",
    "pallet-evm-precompile-modexp/std",
    "pallet-evm-precompile-sha3fips/std",
    "pallet-evm-precompile-simple/std",
]

runtime-benchmarks = [
    "cumulus-pallet-parachain-system/runtime-benchmarks",
    "hex-literal",
    "polkadot-sdk/runtime-benchmarks",
    "pallet-ip-onchain/runtime-benchmarks",
    "pallet-arweave/runtime-benchmarks",
    # Frontier
    "pallet-ethereum/runtime-benchmarks",
    "pallet-evm/runtime-benchmarks",
]

try-runtime = [
    "cumulus-pallet-parachain-system/try-runtime",
    "polkadot-sdk/try-runtime",
    "pallet-ip-onchain/try-runtime",
    "pallet-arweave/try-runtime",
]

# Enable the metadata hash generation.
#
# This is hidden behind a feature because it increases the compile time.
# The wasm binary needs to be compiled twice, once to fetch the metadata,
# generate the metadata hash and then a second time with the
# `RUNTIME_METADATA_HASH` environment variable set for the `CheckMetadataHash`
# extension.
metadata-hash = ["substrate-wasm-builder/metadata-hash"]

# A convenience feature for enabling things when doing a build
# for an on-chain release.
on-chain-release-build = ["metadata-hash"]